{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/services/weather.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,8BAA8B,oBAAoB,wBAAwB,aAAa,yBAAyB,GAAG,iBAAiB,0BAA0B,GAAG,mBAAmB,oBAAoB,oBAAoB,GAAG,yBAAyB,gBAAgB,yBAAyB,GAAG,SAAS,sBAAsB,GAAG,mBAAmB,oBAAoB,sBAAsB,uBAAuB,GAAG,6BAA6B,wBAAwB,oBAAoB,iBAAiB,uBAAuB,GAAG,qBAAqB,oBAAoB,MAAM,yBAAyB,GAAG,MAAM,uBAAuB,GAAG,qBAAqB,yBAAyB,GAAG,2BAA2B,yBAAyB,uBAAuB,GAAG,wBAAwB,mBAAmB,GAAG,sBAAsB,sBAAsB,yBAAyB,gBAAgB,GAAG,wCAAwC,iCAAiC,sBAAsB,OAAO,iBAAiB,wBAAwB,OAAO,GAAG,O;;;;;;;;;;;ACA1hC,yEAAyE,SAAS,kpBAAkpB,+BAA+B,mxBAAmxB,8BAA8B,QAAQ,qBAAqB,8BAA8B,QAAQ,ouC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACArkD;AAEU;AAEV;AAElD;IAAA;IAUA,CAAC;IARC,2BAAS,GAAT,UAAU,KAAY,EAAE,IAAY;QAClC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE;YACxD,OAAO,KAAK,CAAC;SACd;QAED,KAAK,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,QAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAjB,CAAiB,CAAC,CAAC;QACxC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IACH,cAAC;AAAD,CAAC;;AAGD;IAAA;IAIA,CAAC;IAHC,6BAAS,GAAT,UAAW,KAAa;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAHU,SAAS;QADrB,0DAAI,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;OACT,SAAS,CAIrB;IAAD,gBAAC;CAAA;AAJqB;AAUtB;IAME,sBAAoB,OAAuB;QAAvB,YAAO,GAAP,OAAO,CAAgB;QAL3C,UAAK,GAAG,mBAAmB,CAAC;IAKkB,CAAC;IAE/C,+BAAQ,GAAR,cAAY,CAAC;IAEb,2BAA2B;IAC3B,wCAAwC;IACxC,kEAAkE;IAClE,0BAA0B;IAC1B,wBAAwB;IACxB,IAAI;IAEJ,+BAAQ,GAAR,UAAS,IAAY;QAArB,iBAIC;QAHC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,SAAS,CAC1C,cAAI,IAAI,YAAI,CAAC,YAAY,GAAG,IAAI,EAAxB,CAAwB,CACjC,CAAC;IACJ,CAAC;IArBU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAO6B,wEAAc;OANhC,YAAY,CAyCxB;IAAD,mBAAC;CAAA;AAzCwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BiC;AACjB;AAC2B;AACjB;AAC4B;AACb;AACb;AACG;AAGE;AACE;AAoB5D;IAAA;IAAyB,CAAC;IAAb,SAAS;QAlBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,wDAAS;aACV;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,qEAAgB;gBAChB,+DAAc;gBACd,4FAAuB;gBACvB,0DAAW;gBACX,kEAAmB;gBACnB,qEAAgB;gBAChB,4DAAY,CAAC,OAAO,CAAC,EAAE,CAAC;aACzB;YACD,SAAS,EAAE,CAAC,wEAAc,CAAC;YAC3B,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BmB;AACkB;AACN;AACA;AACU;AAqBpC;AAoD3B;IAAA;IAA6B,CAAC;IAAjB,cAAc;QAlD1B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,iEAAe;gBACf,0EAAgB;gBAChB,+DAAa;gBACb,kEAAgB;gBAChB,+DAAa;gBACb,oEAAa;gBACb,8EAAkB;gBAClB,gEAAc;gBACd,oEAAkB;gBAClB,iEAAe;gBACf,+DAAa;gBACb,oEAAa;gBACb,mEAAiB;gBACjB,mEAAiB;gBACjB,iEAAe;gBACf,gEAAc;gBACd,sEAAoB;gBACpB,gEAAc;gBACd,mEAAiB;gBACjB,sEAAoB;gBACpB,0EAAwB;aACzB;YACD,OAAO,EAAE;gBACP,iEAAe;gBACf,0EAAgB;gBAChB,+DAAa;gBACb,kEAAgB;gBAChB,+DAAa;gBACb,oEAAa;gBACb,8EAAkB;gBAClB,gEAAc;gBACd,oEAAkB;gBAClB,uEAAqB;gBACrB,iEAAe;gBACf,+DAAa;gBACb,oEAAa;gBACb,mEAAiB;gBACjB,mEAAiB;gBACjB,iEAAe;gBACf,gEAAc;gBACd,sEAAoB;gBACpB,gEAAc;gBACd,mEAAiB;gBACjB,sEAAoB;gBACpB,0EAAwB;aACzB;YACD,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,8DAAY,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;SACrD,CAAC;OACW,cAAc,CAAG;IAAD,qBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EgB;AACM;AAIjD;IAEE,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,wCAAe,GAAf,UAAgB,IAAY,EAAE,MAA0C;QAA1C,4CAA0C;QACtE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAClB,uDAAqD,IAAI,eAAU,MAAM,0DACxE,CAAC,CAAC;IACP,CAAC;IARU,cAAc;QAD1B,gEAAU,EAAE;yCAGe,+DAAU;OAFzB,cAAc,CAc1B;IAAD,qBAAC;CAAA;AAd0B;AAe3B,0FAA0F;AAC1F,kCAAkC;;;;;;;;;;;;;ACrBlC;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AACzD;AAC2B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".container {\\n    display: flex; /* or inline-flex */\\n}\\n.centered {\\n    text-align: center;\\n}\\n.weather-view {\\n    flex-direction: row;\\n}\\n.items-returned {\\n    padding: 20px;\\n    display: flex;\\n}\\n.items-returned div p {\\n    margin: 0;\\n    text-align: center;\\n}\\n.data {\\n    padding: 0 10px;\\n}\\n.data-container {\\n    display: flex;\\n    flex-flow: wrap;\\n    margin-top: 25px;\\n}\\n.data-container .mat-card {\\n    margin: 10px 20px;\\n    padding: 20px;\\n    width: 75%;\\n    min-width: 150px;\\n}\\n.search .mat-card {\\n    width: 100%\\n}\\nh2 {\\n    text-align: center;\\n}\\nul {\\n    list-style: none;\\n}\\n.search .centered {\\n    text-align: center;\\n}\\n.search .mat-form-field {\\n    margin-right: 20px;\\n    line-height: 1.7;\\n}\\n.mat-card-content img{\\n    width: 150px;\\n}\\n.mat-card-content p{\\n    font-size: 20px;\\n    text-align: center;\\n    margin: 0;\\n}\\n@media screen and (max-width: 480px) {\\n    .data-container .mat-card {\\n        width: 100%;\\n    }\\n    .activity {\\n        display: none;\\n    }\\n}\\n\\n\\n\"","module.exports = \"<div class=\\\"centered\\\">\\n    <h1>\\n      Welcome to {{ title }}!\\n    </h1>\\n  </div>\\n<div class=\\\"container search\\\">\\n  <mat-card>\\n    <mat-card-content>\\n      <form class=\\\"centered\\\">\\n          <mat-form-field> \\n            <input matInput placeholder=\\\"Search For A City\\\" name=\\\"city\\\" [(ngModel)]='city' >\\n          </mat-form-field>\\n          <button mat-raised-button color=\\\"primary\\\" (click)=\\\"forecast(city)\\\">Submit</button>\\n        </form>\\n    </mat-card-content>\\n  </mat-card>\\n</div>\\n\\n<div class=\\\"container\\\">\\n    <div class=\\\"data-container\\\" *ngIf=\\\"fiveForecast\\\">\\n      <div *ngFor=\\\"let item of fiveForecast.list\\\">\\n        <mat-card>\\n          <mat-card-content>\\n            <h2>{{ item.weather[0].description }}</h2>\\n            <p *ngIf=\\\"item.weather[0].description === 'light rain'\\\">\\n              <img src=\\\"./assets/img/rainy-1.svg\\\">\\n            </p>\\n            <p *ngIf=\\\"item.weather[0].description === 'broken clouds'\\\">\\n                <img src=\\\"./assets/img/cloudy-day-3.svg\\\">\\n            </p>\\n            <p *ngIf=\\\"item.weather[0].description === 'scattered clouds'\\\">\\n                <img src=\\\"./assets/img/cloudy-day-1.svg\\\">\\n            </p>\\n            <p *ngIf=\\\"item.weather[0].description === 'few clouds'\\\">\\n                <img src=\\\"./assets/img/cloudy-day-1.svg\\\">\\n            </p>\\n            <p *ngIf=\\\"item.weather[0].description === 'clear sky'\\\">\\n                <img src=\\\"./assets/img/day.svg\\\">\\n            </p>\\n            <p>\\n              {{ item.main.temp_min | round }} &#8457;  /\\n              {{ item.main.temp_max | round }} &#8457; \\n            </p>\\n          </mat-card-content>\\n        </mat-card>\\n\\n        <mat-card class=\\\"activity\\\">\\n          <mat-card-content>\\n              <h3>Activities for today</h3>\\n                <ul *ngIf=\\\"item.weather[0].description == 'clear sky' || item.weather[0].description == 'few clouds' || item.weather[0].description == 'scattered clouds'\\\">\\n                  <li>\\n                      Go Biking\\n                  </li>\\n                  <li>\\n                      play Basketball\\n                  </li>\\n                  <li>\\n                    Go Hiking\\n                  </li>\\n                </ul>\\n                <ul *ngIf=\\\"item.weather[0].description == 'light rain' || item.weather[0].description == 'broken clouds' \\\">\\n                    <li>\\n                        Play Games\\n                    </li>\\n                    <li>\\n                        watch a movie\\n                    </li>\\n                    <li>\\n                      Read a book\\n                    </li>\\n                  </ul>\\n          </mat-card-content>\\n        </mat-card>\\n      </div>\\n      <div>\\n          <p>Credit: amCharts for the awesome animated weather icons</p>\\n        </div>\\n    </div>\\n</div>\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\n\nimport { WeatherService } from './services/weather.service';\nimport { error } from 'util';\nimport {Pipe, PipeTransform} from '@angular/core';\n\nexport class MaxPipe implements PipeTransform {\n\n  transform(value: any[], prop: string) {\n    if (!Array.isArray(value) || value.length === 0 || !prop) {\n      return value;\n    }\n\n    value.sort((a, b) => b[prop] - a[prop]);\n    return value[0][prop];\n  }\n}\n\n@Pipe({name: 'round'})\nexport class RoundPipe implements PipeTransform {\n  transform (input: number) {\n    return Math.floor(input);\n  }\n}\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit  {\n  title = 'Beautiful Weather';\n  myCity: any[];\n  city: string;\n  fiveForecast: any[];\n\n  constructor(private weather: WeatherService) {}\n\n  ngOnInit() {}\n\n  // extract the weather data\n  // async getWeatherState(city: string) {\n  //   const data = await this.weather.getForecast(city).toPromise()\n  //     .then(this.chunks);\n  //   this.myCity = data;\n  // }\n\n  forecast(city: string) {\n    this.weather.fiveDayForecast(city).subscribe(\n      data => this.fiveForecast = data,\n    );\n  }\n\n  // a different approach to this problem\n  // get max and min\n  // minTemp = temps => Math.min(...temps);\n  // maxTemp = temps => Math.max(...temps);\n  // extractTemps = (hourlyTemps, key) => hourlyTemps.map(item => item.main[key]);\n\n\n  // group the data into day\n  // chunks(data, size = 8) {\n  //   const array = data.list;\n  //   let results = [];\n  //   results = [];\n  //   while (array.length) {\n  //     results.push(array.splice(0, size));\n  //   }\n  //   return results;\n  // }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { MaterialModule } from './material.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {RouterModule, Routes} from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n\nimport { AppComponent, RoundPipe } from './app.component';\nimport { WeatherService } from './services/weather.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    RoundPipe\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    MaterialModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    RouterModule.forRoot([])\n  ],\n  providers: [WeatherService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatExpansionModule} from '@angular/material/expansion';\n\nimport {\n  MatButtonModule,\n  MatSlideToggleModule,\n  MatMenuModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatInputModule,\n  MatAutocompleteModule,\n  MatSelectModule,\n  MatGridListModule,\n  MatFormFieldModule,\n  MatSnackBarModule,\n  MatDialogModule,\n  MatChipsModule,\n  MatRadioModule,\n  MatCheckboxModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatDialogRef\n} from '@angular/material';\n\n@NgModule({\n  imports: [\n    MatButtonModule,\n    MatStepperModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatExpansionModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatIconModule,\n    MatTabsModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatChipsModule,\n    MatSlideToggleModule,\n    MatRadioModule,\n    MatCheckboxModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule\n  ],\n  exports: [\n    MatButtonModule,\n    MatStepperModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatExpansionModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatIconModule,\n    MatTabsModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatChipsModule,\n    MatSlideToggleModule,\n    MatRadioModule,\n    MatCheckboxModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule\n  ],\n  providers: [{ provide: MatDialogRef, useValue: {} }]\n})\nexport class MaterialModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable()\nexport class WeatherService {\n\n  constructor(private http: HttpClient) { }\n\n  fiveDayForecast(city: string, metric: 'metric' | 'imperial' = 'imperial'): Observable<any> {\n    return this.http.get(\n      `http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=${metric}&appid=c5e03a2e380341b97751366d83c9abbd&cnt=5\n      `);\n  }\n\n  // getForecast(city: string, metric: 'metric' | 'imperial' = 'imperial'): Observable<any> {\n  //   return this.http.get(\n  //     `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=${metric}&APPID=3197686768faa96b2792ffb60c24bdd0`);\n  // }\n}\n// const url = `${'api.openweathermap.org/data/2.5/forecast?id=524901&APPID=1111111111'}';\n// return this.http.get<any>(url);\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport 'hammerjs';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}